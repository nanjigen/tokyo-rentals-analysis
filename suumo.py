# Tools for scraping SUUMO

def suumo_results_pages():
    # obtaining all content from pre-defined URL
    r = requests.get(search_url)
    c = r.content
    soup = BeautifulSoup(c,"html.parser")
    # it was determined that we need to look inside the class "cassetteitem" having inspected the HTML elements
    all = soup.find_all("div",{"class":"cassetteitem"})
    # now we can see how all entries related to the search were split into pages by looking for "pagination-parts" class instances.
    page_nr = soup.find_all("ol",{"class":"pagination-parts"})[-1].text
    page_nr = [int(s) for s in page_nr.split() if s.isdigit()]
    page_nr = page_nr[len(page_nr)-1]
    return page_nr

def house_collector(start, end):
    """Build list of property by looping through pages of search"""
    property_list = []
    for page in range(start, end):
        r = requests.get(search_url + '&page=' + str(page))
        c = r.content
        soup = BeautifulSoup(c,"html.parser")
        house_elements = soup.find_all(lambda tag: tag.name == 'div' and
                                    tag.get('class') == ['cassetteitem'])
        # "cassetteitem" is the class for each house
        sleep(randint(1,3))
        property_list.extend(house_elements)
    return property_list

def extract_detail_text(html):
   """Extract header data from outside table"""
    house_data = []
    for item in html:
        d = {}
        d["Title"] = item.find("div",{"class","cassetteitem_content-title"}).text
        d["Locality"] = item.find("li",{"class","cassetteitem_detail-col1"}).text
    house_data.append(d)
    return house_data

def extract_table_text(html):
    """Extract text form row data in table"""
    house_data = []
    for cassetteitem in html:
        table = cassetteitem.find('table',{'class','cassetteitem_other'})
        rows = table.find_all('tr', class_='js-cassette_link')
        for row in rows:
            columns = row.find_all('td')
            row_data = {
                'Title': cassetteitem.find('div',{'class','cassetteitem_content-title'}).text,
                'Locality': cassetteitem.find('li',{'class','cassetteitem_detail-col1'}).text,
                'Floor': columns[2].get_text().strip(),
                'Rent': columns[3].find('span', class_='cassetteitem_price--rent').text,
                'Admin Fee': columns[3].find('span', class_='cassetteitem_price--administration').get_text().strip(),
                'Deposit': columns[4].find('span', class_='cassetteitem_price--deposit').get_text().strip(),
                'Key money': columns[4].find('span', class_='cassetteitem_price--gratuity').get_text().strip(),
                'Layout': columns[5].find('span', class_='cassetteitem_madori').get_text().strip(),
                'Size': columns[5].find('span', class_='cassetteitem_menseki').get_text().strip(),
                'Link': "https://suumo.jp" + row.find('a', class_='js-cassette_link_href')['href']
                }
            house_data.append(row_data)
    return house_data

def clean_numeric_data():
    """Clean df generated by scraping"""
    decimal_value = r'(\d+(?:\.\d+)?)'
    int_value = r'\d+'
    # Check if respective column needs cleaning
    if df['Floor'].str.contains("階").any():
        df['Floor'] = df['Floor'].apply(lambda x: re.findall(int_value, x)[0]
                                        if re.findall(int_value, x)
                                        else '')
        df['Rooms'] = df['Layout'].apply(lambda x: re.findall(int_value, x)[0]
                                     if re.findall(int_value, x)
                                     else '1' if 'ワンルーム' in x
                                     else '')
    if df['Size'].str.contains("m2").any():
        df['Size'] = df['Size'].apply(lambda x: re.findall(decimal_value, x)[0]
                                      if re.findall(decimal_value, x)
                                      else '')
    if df['Rent'].str.contains("円").any():
        # df['Rent'] = df['Rent'].apply(lambda x:
        #                             int(float(re.findall(decimal_value, x)[0]) * 1000)
        #                             if '万' in x and re.findall(decimal_value, x)
        #                             else '')
        df['Rent'] = df['Rent'].str.extract(decimal_value, expand=False)
        df['Rent'] = df['Rent'].astype(float).astype(int) * 10000
