# Tools for scraping SUUMO
# 
import requests, re
import json
# import pytest
from time import time, sleep
from random import randint
import scrapy
from scrapy.crawler import CrawlerProcess
from scrapy.http import HtmlResponse
from scrapy.http import TextResponse
import pandas as pd

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
fprop = fm.FontProperties(fname='/fonts/NotoSansCJKjp-Regular.otf')

import seaborn as sns
# sns.set(font='NotoSansCJKjp-Regular.otf')
sns.set(font='Noto Sans CJK JP')

from sqlalchemy import create_engine

plt.style.use('fivethirtyeight')
color_pal = plt.rcParams["axes.prop_cycle"].by_key()["color"]
# import database

# [f for f in fm.fontManager.ttflist if 'Noto' in f.name]
# print(fm.matplotlib_fname())
# matplotlib.font_manager.findSystemFonts()
from matplotlib import pyplot as plt,font_manager as fm
from pathlib import Path
import os
#Restore the `.rcParams` from Matplotlib's internal default style.
plt.rcdefaults()

path = Path(os.getcwd())
# fname=os.path.join(path.parent.absolute(),'data','NotoSansCJKjp-Regular.otf')
fname=os.path.join(path.absolute(),'fonts','NotoSansCJKjp-Regular.otf')
fontProperties=fm.FontProperties(fname=fname,size=14)
default_font=fontProperties.get_name()# "Arial Unicode MS"
if default_font not in [f.name for f in fm.fontManager.ttflist]:
    print(f"{default_font} does not exist, let's add it to fontManager" )

if fname not in [f.fname for f in fm.fontManager.ttflist]:
    fm.fontManager.addfont(fname) # need absolute path

plt.rcParams['font.sans-serif']=[default_font]+plt.rcParams['font.sans-serif']
plt.rcParams['axes.unicode_minus']=False # in case minus sign is shown as box
# "/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc"

# Constants
def clean_numeric_data(dataframe: pd.DataFrame) -> pd.DataFrame:
    """
    Clean the dataframe generated by scraping to address inconsistencies, missing values, and outliers.

    Args:
        dataframe (pd.DataFrame): The input DataFrame to be cleaned.

    Returns:
        pd.DataFrame: The cleaned DataFrame.
    """
    if not isinstance(dataframe, (pd.DataFrame, pd.Series)):
        raise ValueError("Input must be a Pandas DataFrame or Series.")

    df = dataframe.copy()

    # Pre-compile regular expressions
    decimal_value = re.compile(r'(\d+(?:\.\d+)?)')
    int_value = re.compile(r'\d+')

    # Check if respective column needs cleaning
    if not df.empty:
        if df['Floor'].str.contains("階").any():
            df['Floor'] = df['Floor'].apply(lambda x: re.findall(int_value, x)[0]
                                            if re.findall(int_value, x)
                                            else '')
            df['Rooms'] = df['Layout'].apply(lambda x: re.findall(int_value, x)[0]
                                        if re.findall(int_value, x)
                                        else '1' if 'ワンルーム' in x
                                        else '')
        if df['Size'].str.contains("m2").any():
            df['Size'] = df['Size'].apply(lambda x: re.findall(decimal_value, x)[0]
                                        if re.findall(decimal_value, x)
                                        else '')
        if df['Rent'].str.contains("円").any():
            # df['Rent'] = df['Rent'].apply(lambda x:
            #                             int(float(re.findall(decimal_value, x)[0]) * 1000)
            #                             if '万' in x and re.findall(decimal_value, x)
            #                             else '')
            df['Rent'] = df['Rent'].str.extract(decimal_value, expand=False)
            df['Rent'] = df['Rent'].astype(float).astype(int) * 10000
        return df


def create_database(db, table, start_page, end_page):
    engine = create_engine('sqlite:///%s' %db, echo=True)
    sqlite_table = table
    sqlite_connection = engine.connect()
    (load_data(start, end)
    .pipe(clean_numeric_data).to_sql(
        sqlite_table,
        sqlite_connection,
        if_exists='replace',
        index=False
    ))
    sqlite_connection.close()
